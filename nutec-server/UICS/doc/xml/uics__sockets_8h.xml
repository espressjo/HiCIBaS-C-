<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="uics__sockets_8h" kind="file" language="C++">
    <compoundname>uics_sockets.h</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">sys/socket.h</includes>
    <includes local="no">netinet/in.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">netdb.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">arpa/inet.h</includes>
    <includes refid="inst__log_8h" local="yes">inst_log.h</includes>
    <includedby refid="threaded__f1_8h" local="yes">/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/example/threaded_f1.h</includedby>
    <includedby refid="uics__cmds_8h" local="yes">/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_cmds.h</includedby>
    <includedby refid="msghandler_8cpp" local="yes">/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/msghandler.cpp</includedby>
    <includedby refid="state__handler_8h" local="yes">/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/state_handler.h</includedby>
    <includedby refid="uics__sockets_8cpp" local="yes">/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.cpp</includedby>
    <includedby refid="uics__state_8cpp" local="yes">/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_state.cpp</includedby>
    <incdepgraph>
      <node id="12">
        <label>inst_log.h</label>
        <link refid="inst__log_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>netinet/in.h</label>
      </node>
      <node id="11">
        <label>arpa/inet.h</label>
      </node>
      <node id="8">
        <label>stdlib.h</label>
      </node>
      <node id="14">
        <label>string</label>
      </node>
      <node id="9">
        <label>netdb.h</label>
      </node>
      <node id="1">
        <label>/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.h</label>
        <link refid="uics__sockets_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>inst_time.h</label>
        <link refid="inst__time_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>sys/types.h</label>
      </node>
      <node id="5">
        <label>string.h</label>
      </node>
      <node id="15">
        <label>ctime</label>
      </node>
      <node id="10">
        <label>unistd.h</label>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
      <node id="6">
        <label>sys/socket.h</label>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="12">
        <label>/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/lib/uics.h</label>
        <link refid="lib_2uics_8h_source"/>
      </node>
      <node id="15">
        <label>/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_state.cpp</label>
        <link refid="uics__state_8cpp_source"/>
      </node>
      <node id="9">
        <label>/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/fhtable.cpp</label>
        <link refid="fhtable_8cpp_source"/>
      </node>
      <node id="14">
        <label>/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics.h</label>
        <link refid="src_2uics_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_cmds.cpp</label>
        <link refid="uics__cmds_8cpp_source"/>
      </node>
      <node id="1">
        <label>/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.h</label>
        <link refid="uics__sockets_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_cmds.h</label>
        <link refid="uics__cmds_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_state.h</label>
        <link refid="uics__state_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/example/main.cpp</label>
        <link refid="main_8cpp_source"/>
      </node>
      <node id="6">
        <label>/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/example/test.h</label>
        <link refid="test_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/example/threaded_f1.cpp</label>
        <link refid="threaded__f1_8cpp_source"/>
      </node>
      <node id="7">
        <label>/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/example/test.cpp</label>
        <link refid="test_8cpp_source"/>
      </node>
      <node id="2">
        <label>/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/example/threaded_f1.h</label>
        <link refid="threaded__f1_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/msghandler.h</label>
        <link refid="msghandler_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/state_handler.cpp</label>
        <link refid="state__handler_8cpp_source"/>
      </node>
      <node id="8">
        <label>/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/fhtable.h</label>
        <link refid="fhtable_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.cpp</label>
        <link refid="uics__sockets_8cpp_source"/>
      </node>
      <node id="11">
        <label>/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/state_handler.h</label>
        <link refid="state__handler_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/msghandler.cpp</label>
        <link refid="msghandler_8cpp_source"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="uics__sockets_8h_1a4d04a8261523c8f3473946257c12ce5b" prot="public" static="no">
        <name>h_addr</name>
        <initializer>h_addr_list[0]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.h" line="19" column="9" bodyfile="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="uics__sockets_8h_1a714defe182f3894dd1ab08671be0b4f0" prot="public" static="no" mutable="no">
        <type><ref refid="classLog" kindref="compound">Log</ref></type>
        <definition>Log instLog</definition>
        <argsstring></argsstring>
        <name>instLog</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.h" line="16" column="12" bodyfile="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/msghandler.cpp" bodystart="8" bodyend="-1" declfile="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.h" declline="16" declcolumn="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="uics__sockets_8h_1a29bb75c229396d9085a60d3689eee7ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void log_socket</definition>
        <argsstring>(std::string txt)</argsstring>
        <name>log_socket</name>
        <param>
          <type>std::string</type>
          <declname>txt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.h" line="17" column="13" bodyfile="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.h" bodystart="17" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="uics__sockets_8h_1ad38aa858f975059f00780233dd7242b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Perror</definition>
        <argsstring>(std::string txt)</argsstring>
        <name>Perror</name>
        <param>
          <type>std::string</type>
          <declname>txt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.h" line="18" column="13" bodyfile="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.h" bodystart="18" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="uics__sockets_8h_ac1987388af2c7123a7d9d1ebf1647b10_1ac1987388af2c7123a7d9d1ebf1647b10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int create_socket</definition>
        <argsstring>(uint16_t port)</argsstring>
        <name>create_socket</name>
        <param>
          <type>uint16_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Description. </para>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 This function create a socket and return the socket file descriptor.</para>
<para>Return</para>
<para><hruler/>
 return -1 if it failed to create the socket. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.h" line="21" column="5" bodyfile="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.cpp" bodystart="5" bodyend="50" declfile="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.h" declline="21" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="uics__sockets_8h_a3e455219819bb3c7a8d33ecdb6a59014_1a3e455219819bb3c7a8d33ecdb6a59014" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int read_socket</definition>
        <argsstring>(std::string *buffer, int sockfd)</argsstring>
        <name>read_socket</name>
        <param>
          <type>std::string *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sockfd</declname>
        </param>
        <briefdescription>
<para>Description. </para>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 This function read a socket file descriptor and copy the message into buffer. Max length of message is 9216 characters. The message read always starts by the character L followed by 2 extra characters indicating the length of the message. This implementation is hidden, i.e., one should not care about this when using the read_socket and write_socket function of this library, but only if this function reads the buffer sent from third party fuction.</para>
<para>Return</para>
<para><hruler/>
 return 0 if succesfull, -1 if it fails to read the socket. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.h" line="23" column="5" bodyfile="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.cpp" bodystart="52" bodyend="134" declfile="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.h" declline="23" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="uics__sockets_8h_abb580aa4420ef68db4509da3b7ebfbae_1abb580aa4420ef68db4509da3b7ebfbae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int read_socket</definition>
        <argsstring>(uint16_t port, std::string *buffer)</argsstring>
        <name>read_socket</name>
        <param>
          <type>uint16_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Description. </para>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 Reads a socket on the localhost on port #. Max length of message is 9216 characters. The message read always starts by the character L followed by 2 extra characters indicating the length of the message. This implementation is hidden, i.e., one should not care about this when using the read_socket and write_socket function of this library, but only if this function reads the buffer sent from third party fuction.</para>
<para>Return</para>
<para><hruler/>
 return 0 if successfull and -1 if not. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.h" line="24" column="5" bodyfile="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.cpp" bodystart="317" bodyend="428" declfile="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.h" declline="24" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="uics__sockets_8h_a83ebf883f888b505fde7afa4bb6cfe60_1a83ebf883f888b505fde7afa4bb6cfe60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int read_socket</definition>
        <argsstring>(uint16_t port, std::string *buffer, std::string addr)</argsstring>
        <name>read_socket</name>
        <param>
          <type>uint16_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Description. </para>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 Read a socket given and addresse and a port and store the message in buffer. Max length of message is 9216 characters. The message read always starts by the character L followed by 2 extra characters indicating the length of the message. This implementation is hidden, i.e., one should not care about this when using the read_socket and write_socket function of this library, but only if this function reads the buffer sent from third party fuction.</para>
<para>Return</para>
<para><hruler/>
 returns 0 if successfull and -1 if it fails to read the socket. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.h" line="25" column="5" bodyfile="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.cpp" bodystart="205" bodyend="315" declfile="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.h" declline="25" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="uics__sockets_8h_a4db26781249cbb5255dd1ff6383cc31f_1a4db26781249cbb5255dd1ff6383cc31f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int read_image</definition>
        <argsstring>(unsigned int *im, size_t length, int sockfd)</argsstring>
        <name>read_image</name>
        <param>
          <type>unsigned int *</type>
          <declname>im</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sockfd</declname>
        </param>
        <briefdescription>
<para>Description. </para>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 This function reads an array of uint16 of a given length from a socket file descriptor. The array is transfered in chunks of 512 bytes. This function is ideal to transfer images by socket. The size of the array must be known prior of using this function and the array must be able to contain all entire size. There is no guards to prevent memory problems.</para>
<para>Return</para>
<para><hruler/>
 return 0 if succesfull, -1 if it fails to read the socket. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.h" line="26" column="5" bodyfile="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.cpp" bodystart="136" bodyend="203" declfile="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.h" declline="26" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="uics__sockets_8h_a2cf906a2ca12ad3e85b7394d468910a5_1a2cf906a2ca12ad3e85b7394d468910a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int write_image</definition>
        <argsstring>(uint16_t port, unsigned int *im, size_t length, std::string addr)</argsstring>
        <name>write_image</name>
        <param>
          <type>uint16_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>im</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Description. </para>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 This function writes an array of uint16 of a given length on socket with address addr and port # file descriptor. The array is transfered in chunks of 512 bytes. This function is ideal to transfer images by socket. The size of the array must be known prior of using this function and the array must be able to contain all entire size. There is no guards to prevent memory problems.</para>
<para>Return</para>
<para><hruler/>
 return 0 if succesfull, -1 if it fails to read the socket. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.h" line="28" column="5" bodyfile="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.cpp" bodystart="591" bodyend="677" declfile="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.h" declline="28" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="uics__sockets_8h_a5231d462ee0164e77b22118a2f1f9508_1a5231d462ee0164e77b22118a2f1f9508" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int write_socket</definition>
        <argsstring>(uint16_t port, std::string command, std::string addr)</argsstring>
        <name>write_socket</name>
        <param>
          <type>uint16_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>command</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Description. </para>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 Write a socket on the host with address addr on port #. Max length of message is 9216 characters. The message read always starts by the character L followed by 2 extra characters indicating the length of the message. This implementation is hidden, i.e., one should not care about this when using the read_socket and write_socket function of this library, but only if this function reads the buffer sent from third party fuction.</para>
<para>Return</para>
<para><hruler/>
 return 0 if successfull and -1 if not. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.h" line="29" column="5" bodyfile="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.cpp" bodystart="512" bodyend="589" declfile="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.h" declline="29" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="uics__sockets_8h_a86da90a92a5f40d09386ec029915c6b3_1a86da90a92a5f40d09386ec029915c6b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int write_socket</definition>
        <argsstring>(uint16_t port, std::string command)</argsstring>
        <name>write_socket</name>
        <param>
          <type>uint16_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>command</declname>
        </param>
        <briefdescription>
<para>Description. </para>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 Writes a socket on the localhost on port #. Max length of message is 9216 characters. The message writes always starts by the character L followed by 2 extra characters indicating the length of the message. This implementation is hidden, i.e., one should not care about this when using the read_socket and write_socket function of this library, but only if this function reads the buffer sent from third party fuction.</para>
<para>Return</para>
<para><hruler/>
 return 0 if successfull and -1 if not. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.h" line="30" column="5" bodyfile="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.cpp" bodystart="430" bodyend="511" declfile="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.h" declline="30" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="uics__sockets_8h_aa0023befd92e980a6177792502e09bb0_1aa0023befd92e980a6177792502e09bb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int write_socket</definition>
        <argsstring>(std::string command, int sock)</argsstring>
        <name>write_socket</name>
        <param>
          <type>std::string</type>
          <declname>command</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <briefdescription>
<para>Description. </para>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 Write a socket on the localhost with file descriptor sock. Max length of message is 9216 characters. The message read always starts by the character L followed by 2 extra characters indicating the length of the message. This implementation is hidden, i.e., one should not care about this when using the read_socket and write_socket function of this library, but only if this function reads the buffer sent from third party fuction.</para>
<para>Return</para>
<para><hruler/>
 return 0 if successfull and -1 if not. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.h" line="31" column="5" bodyfile="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.cpp" bodystart="679" bodyend="725" declfile="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.h" declline="31" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>UICS_SOCKETS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UICS_SOCKETS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/socket.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;netinet/in.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;netdb.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>close</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;arpa/inet.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;inst_log.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="classLog" kindref="compound">Log</ref><sp/>instLog;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>log_socket(std::string<sp/>txt){instLog.<ref refid="classLog_a56b5e3ad2b50bec28beeaa5be7d6999e_1a56b5e3ad2b50bec28beeaa5be7d6999e" kindref="member">writeto</ref>(</highlight><highlight class="stringliteral">&quot;[socket]<sp/>&quot;</highlight><highlight class="normal">+txt,3<sp/>);}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Perror(std::string<sp/>txt){log_socket(txt);perror(txt.c_str());}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>h_addr<sp/>h_addr_list[0]//to<sp/>be<sp/>posix<sp/>complient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>create_socket(uint16_t<sp/>port);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>read_socket(std::string<sp/>*buffer,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sockfd);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>read_socket(uint16_t<sp/>port,std::string<sp/>*buffer);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>read_socket(uint16_t<sp/>port,std::string<sp/>*buffer,std::string<sp/>addr);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>read_image(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*im,</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sockfd);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>write_image(uint16_t<sp/>port,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*im,</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length,std::string<sp/>addr);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>write_socket(uint16_t<sp/>port,<sp/>std::string<sp/>command,std::string<sp/>addr);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>write_socket(uint16_t<sp/>port,<sp/>std::string<sp/>command);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>write_socket(std::string<sp/>command,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sock);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>UICS_SOCKETS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/noboru/Documents/UdeM/HxRG-SERVER2/UICS/src/uics_sockets.h"/>
  </compounddef>
</doxygen>
