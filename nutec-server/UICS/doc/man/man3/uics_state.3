.TH "uics_state" 3 "Wed Oct 20 2021" "Version 1.0" "UICS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
uics_state
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBuics_state\fP (\fBinstHandle\fP *handle)"
.br
.ti -1c
.RI "void \fBrun\fP (int sockfd)"
.br
.RI "main function The run method wait for an incoming command\&. Once all the check up is OK (cmd exist, argument are ok,\&.\&.\&.) we check if the requested callback function is defined\&. "
.ti -1c
.RI "void \fBadd_callback\fP (const char *fname, void(*f)(\fBinstHandle\fP *, \fBcmd\fP *))"
.br
.ti -1c
.RI "void \fBexecute\fP (const char *fname)"
.br
.RI "Description method to execute a standard function\&. A standard function accept one argument of type cmd, return void and must be 1st set using the add_config_func method\&. This method will execute the command named fname with *cc argument\&. "
.ti -1c
.RI "void \fBexecuteOnlyOnce\fP (STATE nextState)"
.br
.ti -1c
.RI "void \fBstart_with\fP (const char *fname)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "std::vector< std::string > \fBffname\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 15 of file uics_state\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void uics_state::add_callback (const char * fname, void(*)(\fBinstHandle\fP *, \fBcmd\fP *) f)"
Add a function callback to the class\&. A standard function accept one argument of type cmd, return void and must be 1st set using the add_config_func method\&. 
.PP
Definition at line 182 of file uics_state\&.cpp\&.
.PP
.nf
188 {
189     
190     functions\&.add_value(fname,f);
191     ffname\&.push_back(std::string(fname));
192 }
.fi
.SS "void uics_state::execute (const char * fname)"

.PP
Description method to execute a standard function\&. A standard function accept one argument of type cmd, return void and must be 1st set using the add_config_func method\&. This method will execute the command named fname with *cc argument\&. 
.PP
Definition at line 82 of file uics_state\&.cpp\&.
.PP
.nf
91 {
92     void (*f)(instHandle*,cmd*);
93     f = functions[fname];
94     if (f!=nullptr)
95     {
96         f(myHandle,cmd2exec);
97     }
98 
99     return ;
100 }
.fi
.SS "void uics_state::executeOnlyOnce (STATE nextState)"
If this fucntion is called, the \fBuics_state::run\fP will only execute one function\&. This functionallity is usefull for the acquisition combine with a idle state\&. The \fBuics_state(acq)\fP only has 1 function; acquisition()\&. Once the function return, we may tell the \fBuics_state\fP to go to another state e\&.g\&., the idle state 
.PP
Definition at line 127 of file uics_state\&.cpp\&.
.PP
.nf
137 {
138     eOO = true;
139     eOOnextState = nextState;
140 }
.fi
.SS "void uics_state::run (int sockfd)"

.PP
main function The run method wait for an incoming command\&. Once all the check up is OK (cmd exist, argument are ok,\&.\&.\&.) we check if the requested callback function is defined\&. 
.PP
Definition at line 37 of file uics_state\&.cpp\&.
.PP
.nf
44 {
45     while(1)
46     {
47         //if start_with has been used, start by launching this function
48         if (SW)
49         {
50             execute(SW_fname\&.c_str());
51         }
52         int out = getNextConnection(sockfd);
53 
54         if (out==0)
55         {
56             if (!cmd2exec)
57             {
58                 //std::cout<<"super problem!!"<<std::endl;
59                 log_state_transition("Major issue\&.");
60             }
61             else {
62                 if (isInList(cmd2exec->name))
63                 {
64                     execute(cmd2exec->name\&.c_str());
65                     if (eOO)
66                     {
67                         log_state_transition("Transition " +std::to_string(myHandle->nextState)+"->"+std::to_string(eOOnextState));
68                         myHandle->nextState = eOOnextState;
69                     }
70                     break;
71                 }
72                 else
73                 {
74                     log_state_transition("function not recognized");
75                     sndMsg(cmd2exec->sockfd,"function not recognized",nidcsCMD_ERR_NOT_SUPPORTED);
76                 }
77             }
78         }
79         else if (out==EXIT) {break;}
80     }
81 }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for UICS from the source code\&.
